Imports: { import static gate.Utils.*; }
Phase:	three_sent_gram
Input: Sentence TargetKeyword
Options: control = All



Rule: target_sentence_1

(
({Sentence contains TargetKeyword})
):bigMatch
-->
:bigMatch{
	  AnnotationSet words = inputAS.get("Token").getContained(start(bigMatchAnnots), end(bigMatchAnnots));
	  //AnnotationSet bigmatchAS = bindings.get("bigMatch");
	  long numWords = 0;	
	  for(Annotation t : words) {
		  numWords++;
	  }
		FeatureMap fm = Factory.newFeatureMap();	  
		fm.put("numWords",numWords);
		fm.put("priority",1);		
		outputAS.add(bigMatchAnnots.firstNode(), bigMatchAnnots.lastNode(), "Context",  fm); 		

}

Rule: target_sentence_2

(
({Sentence})
({Sentence contains TargetKeyword})
):bigMatch
-->
:bigMatch{
	  AnnotationSet words = inputAS.get("Token").getContained(start(bigMatchAnnots), end(bigMatchAnnots));
	  //AnnotationSet bigmatchAS = bindings.get("bigMatch");
	  long numWords = 0;	
	  for(Annotation t : words) {
		  numWords++;
	  }
		FeatureMap fm = Factory.newFeatureMap();	  
		fm.put("numWords",numWords);
		fm.put("priority",2);			
		outputAS.add(bigMatchAnnots.firstNode(), bigMatchAnnots.lastNode(), "Context",  fm); 		

}

Rule: target_sentence_3

(
({Sentence})
({Sentence contains TargetKeyword})
({Sentence})
):bigMatch
-->
:bigMatch{
	  AnnotationSet words = inputAS.get("Token").getContained(start(bigMatchAnnots), end(bigMatchAnnots));
	  //AnnotationSet bigmatchAS = bindings.get("bigMatch");
	  long numWords = 0;	
	  for(Annotation t : words) {
		  numWords++;
	  }
		FeatureMap fm = Factory.newFeatureMap();	  
		fm.put("numWords",numWords);
		fm.put("priority",3);			
		outputAS.add(bigMatchAnnots.firstNode(), bigMatchAnnots.lastNode(), "Context",  fm); 		

}

Rule: target_sentence_4

(
({Sentence})
({Sentence})
({Sentence contains TargetKeyword})
({Sentence})
):bigMatch
-->
:bigMatch{
	  AnnotationSet words = inputAS.get("Token").getContained(start(bigMatchAnnots), end(bigMatchAnnots));
	  //AnnotationSet bigmatchAS = bindings.get("bigMatch");
	  long numWords = 0;	
	  for(Annotation t : words) {
		  numWords++;
	  }
		FeatureMap fm = Factory.newFeatureMap();	  
		fm.put("numWords",numWords);
		fm.put("priority",4);			
		outputAS.add(bigMatchAnnots.firstNode(), bigMatchAnnots.lastNode(), "Context",  fm); 		

}

Rule: target_sentence_5

(
({Sentence})
({Sentence})
({Sentence contains TargetKeyword})
({Sentence})
({Sentence})
):bigMatch
-->
:bigMatch{
	  AnnotationSet words = inputAS.get("Token").getContained(start(bigMatchAnnots), end(bigMatchAnnots));
	  //AnnotationSet bigmatchAS = bindings.get("bigMatch");
	  long numWords = 0;	
	  for(Annotation t : words) {
		  numWords++;
	  }
		FeatureMap fm = Factory.newFeatureMap();	  
		fm.put("numWords",numWords);
		fm.put("priority",5);			
		outputAS.add(bigMatchAnnots.firstNode(), bigMatchAnnots.lastNode(), "Context",  fm); 		

}